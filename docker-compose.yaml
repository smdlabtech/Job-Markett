services:
  
  x-airflow-common:
    &airflow-common
    # In order to add custom dependencies or upgrade provider packages you can use your extended image.
    # Comment the image line, place your Dockerfile.streamlit.api in the directory where you placed the docker-compose.yaml
    # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
    build:
      context: .
      dockerfile: airflow/Dockerfile
      args:
        AIRFLOW_BASE_IMAGE: ${AIRFLOW_BASE_IMAGE:-apache/airflow:3.0.0-python3.12}
    image: ${JM_IMAGE_NAME}:${JM_IMAGE_TAG}
    environment:
      &airflow-common-env
      TZ: ${TIME_ZONE}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@airflow-db:5432/${AIRFLOW_POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__INTERNAL_API_SECRET_KEY: ${INTERNAL_API_SECRET_KEY}
      AIRFLOW__API_AUTH__JWT_SECRET: ${AIRFLOW__API_AUTH__JWT_SECRET}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__API__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__METRICS__STATSD_ON: 'True'
      AIRFLOW__METRICS__STATSD_HOST: 'statsd-exporter'
      AIRFLOW__METRICS__STATSD_PORT: '9125'
      AIRFLOW__METRICS__STATSD_PREFIX: 'airflow'
      AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
      #_PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      PYTHONPATH: /src
      PROJECT_ROOT: /
      ADZUNA_BASE_URL: ${ADZUNA_BASE_URL}
      ADZUNA_APP_ID: ${ADZUNA_APP_ID}
      ADZUNA_APP_KEY: ${ADZUNA_APP_KEY}
      JSEARCH_HOST: ${JSEARCH_HOST}
      JSEARCH_BASE_URL: ${JSEARCH_BASE_URL}
      JSEARCH_KEY: ${JSEARCH_KEY}
      FRANCE_TRAVAIL_ID: ${FRANCE_TRAVAIL_ID}
      FRANCE_TRAVAIL_KEY: ${FRANCE_TRAVAIL_KEY}
      FRANCE_TRAVAIL_SCOPES: ${FRANCE_TRAVAIL_SCOPES}
      JOBS_POSTGRES_DB: ${JOBS_POSTGRES_DB}
      JOBS_POSTGRES_USER: ${JOBS_POSTGRES_USER}
      JOBS_POSTGRES_PASSWORD: ${JOBS_POSTGRES_PASSWORD}
      JOBS_POSTGRES_HOST: ${JOBS_POSTGRES_HOST}
      JOBS_POSTGRES_PORT: ${JOBS_POSTGRES_PORT}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./src:/src
      - ./data:/data
      - ./ressources:/ressources
      - ./logs:/logs
    user: "${AIRFLOW_UID}:0"
    depends_on:
      &airflow-common-depends-on
      airflow-db:
        condition: service_healthy
      jobs-db:
        condition: service_healthy
        

  jobs-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${JOBS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${JOBS_POSTGRES_PASSWORD}
      POSTGRES_DB: ${JOBS_POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${JOBS_POSTGRES_USER}", "-d", "${JOBS_POSTGRES_DB}"]
      interval: 5s
      retries: 5
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./src/sql:/src/sql:ro
      - ./src/sql/entrypoint.sh:/docker-entrypoint-initdb.d/99-init-custom.sh:ro
  
  
  airflow-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_POSTGRES_USER}", "-d", "${AIRFLOW_POSTGRES_DB}"]
      interval: 5s
      retries: 5
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
  

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins

    
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  
  #redis:
  #  # Redis is limited to 7.2-bookworm due to licencing change
  #  # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
  #  image: redis:7.2-bookworm
  #  expose:
  #    - 6379
  #  healthcheck:
  #    test: ["CMD", "redis-cli", "ping"]
  #    interval: 10s
  #    timeout: 30s
  #    retries: 50
  #    start_period: 30s
  #  restart: always
    
  #airflow-worker:
  #  <<: *airflow-common
  #  command: celery worker
  #  healthcheck:
  #    # yamllint disable rule:line-length
  #    test:
  #      CMD-SHEL celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d celery@$${HOSTNAME} || celery --app airflow.executors.celery_executor.app inspect ping -d celery@$${HOSTNAME}
  #    interval: 30s
  #    timeout: 10s
  #    retries: 5
  #    start_period: 30s
  #  environment:
  #    <<: *airflow-common-env
  #    # Required to handle warm shutdown of the celery workers properly
  #    # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
  #    DUMB_INIT_SETSID: "0"
  #  restart: always
  #  depends_on:
  #    <<: *airflow-common-depends-on
  #    airflow-apiserver:
  #      condition: service_healthy
  #    airflow-init:
  #      condition: service_completed_successfully
        
        
  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

        
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
    
  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      
      
  api:
    build:
      context: .
      dockerfile: src/API/Dockerfile.api
    environment:
      - PROJECT_ROOT=/
    volumes:
      - ./src:/src
      - ./data:/data          # accès lecture/écriture pour l'API
      - ./ressources:/ressources
    ports:
      - "8000:8000"
    restart: always


  streamlit:
    build:
      context: .
      dockerfile: job_market_app/Dockerfile.streamlit
    depends_on:
      - api
    environment:
      - CONTENT_DIR=/app
      - STREAMLIT_API_HOST=${STREAMLIT_API_HOST}
    volumes:
      - ./data:/data
      - ./ressources:/ressources
    ports:
      - "8501:8501"
    restart: always

  
  grafana:
    image: grafana/grafana:12.0.0
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_KEY}
    restart: always
  
  
  statsd-exporter:
    image: prom/statsd-exporter
    ports:
      - "9125:9125/udp"  # StatsD port
      - "9102:9102"      # Prometheus metrics port
    command: ["--log.level=info"]
    
    
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: always
    depends_on:
      - statsd-exporter


volumes:
  db_data:
  airflow_db_data:
  grafana_data:
